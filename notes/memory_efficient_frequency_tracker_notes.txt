Developer Notes - Memory-Efficient Frequency Tracker
===================================================

This problem focuses on packing frequency counts in a compact form suitable
for embedded environments with strict RAM limits. Each 8-bit sensor value
can appear at most 15 times. We only have 512 bytes for 256 frequencies.

Implementation plan:
- Two 4-bit frequencies are stored per byte in `freq_table`.
- For an index `i`:
  - `byte_index = i / 2`
  - If `i` is even, its count occupies the lower nibble.
  - If `i` is odd, its count occupies the upper nibble.
- Use bitwise masking and shifting to read or update the correct nibble.

The helper `get_frequency` simply extracts the appropriate nibble.

Edge cases:
- Frequencies are clamped to 15. Additional occurrences beyond 15 are ignored.
- The input readings array is assumed to contain values in 0..255.
